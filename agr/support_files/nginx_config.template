worker_processes  1;
error_log error.log;
events {
    worker_connections 1024;
}

http {
    upstream database {
        postgres_server  %(db_host)s dbname=%(db_name)s user=%(db_user)s password=%(db_password)s;
    }
    server_tokens off;

    # allow clients to request data be gzip'd 
    gzip on; 
    gzip_types application/json;   ## support plain text

    # whitelist on rate limiting, adapted from
    # http://serverfault.com/posts/642357/edit
    geo $whitelist {
       default 0;
       # CIDR in the list below are not limited
       127.0.0.1/32 1;
    }

    map $whitelist $limit {
        0     $binary_remote_addr;
        1     "";
    }

    # enable rate limiting. 10m but basically default, lets us track 160k 
    # addresses. The rate is 10 requests per second per IP
    limit_req_zone $limit zone=agrest:10m rate=10r/s;
    limit_req             zone=agrest burst=5 nodelay;

    server {
        listen 8080;
        default_type application/json;
        
        # allow for JSONP 
        xss_get on;
        xss_callback_arg callback;
        xss_output_type 'application/x-javascript';

        # let the client know about the different endpoints
        location = / {
            echo "{";
            echo "  \"otu_url\": \"https://${hostname}${uri}otu/:sample-id\", ";
            echo "  \"otu_json_url\": \"https://${hostname}${uri}otu/:sample-id/json\", ";
            echo "  \"otu_txt_url\": \"https://${hostname}${uri}otu/:sample-id/txt\", ";
            echo "  \"sample_url\": \"https://${hostname}${uri}sample/\"";
            echo "  \"sequence_url\": \"https://${hostname}${uri}sequence/:sample-id\"";
            echo "}";
        }

        # get OTU data in BIOM v1.0
        location ~ /otu/(?<num>\d+?\.[0-9a-zA-Z]+) {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
            
            postgres_pass     database;
            postgres_escape $escaped $num;
            postgres_output text;

            postgres_query    GET  "SELECT biom FROM biom WHERE sample=$escaped";
            postgres_rewrite  GET  no_rows 410;
        }

        # get OTU data in BIOM v1.0. This is a replicated location and there
        # likely is a better way to support different formats, but doing 
        # something like ?format=json was not lending itself well as nginx
        # if-statements are frowned upon. 
        location ~ /otu/(?<num>\d+?\.[0-9a-zA-Z]+)/json {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            postgres_pass     database;
            postgres_escape $escaped $num;
            postgres_output text;

            postgres_query    GET  "SELECT biom FROM biom WHERE sample=$escaped";
            postgres_rewrite  GET  no_rows 410;
        }

        # get OTU data in tab delimited format
        location ~ /otu/(?<num>\d+?\.[0-9a-zA-Z]+)/txt {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            postgres_pass     database;
            postgres_escape $escaped $num;
            postgres_output text;

            postgres_query    GET  "SELECT biomtxt FROM biom WHERE sample=$escaped";
            postgres_rewrite  GET  no_rows 410;
        }

        # get known samples
        location /sample {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            postgres_pass     database;
            postgres_output text;

            postgres_query GET "SELECT json_agg(sample) as samples FROM biom";
            postgres_rewrite  GET  no_rows 410;
        }

        # fetch sequences
        location ~ /sequence/(?<num>\d+?\.[0-9a-zA-Z]+) {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            rds_json on;
            postgres_output rds;
            postgres_pass    database;
            postgres_escape $escaped $num;
            postgres_query  GET "SELECT url as fastq_url FROM fastq WHERE sample=$escaped";
            postgres_rewrite  no_rows    410;
        }
    }
}
