worker_processes  1;
error_log error.log;
events {
    worker_connections 1024;
}

http {
    upstream database {
        postgres_server  127.0.0.1 dbname=ag_rest user=postgres;
    }
    server_tokens off;

    # enable rate limiting. 10m but basically default, lets us track 160k 
    # addresses. The rate is 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=agrest:10m rate=10r/s;
    gzip on; 
    gzip_types application/json;

    server {
        listen 8080;
        #default_type application/json;
       
        # allow for JSONP 
        xss_get on;
        xss_callback_arg callback;
        xss_output_type 'application/x-javascript';

        ### RATE LIMITING

        # let the client know about the different endpoints
        location = / {
            limit_req zone=agrest burst=5;
            echo "{";
            echo "  \"otu_url\": \"https://${hostname}${uri}otu/:sample-id\", ";
            echo "  \"otu_json_url\": \"https://${hostname}${uri}otu/:sample-id/json\", ";
            echo "  \"otu_txt_url\": \"https://${hostname}${uri}otu/:sample-id/txt\", ";
            echo "  \"sample_url\": \"https://${hostname}${uri}sample/\"";
            echo "  \"sequence_url\": \"https://${hostname}${uri}sequence/:sample-id\"";
            echo "asdasd $limit_rate";
            echo "}";
        }

        # get OTU data in BIOM v1.0
        location ~ /otu/(?<num>\d+?\.[0-9a-zA-Z]+) {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
            
            # rate limit to 5 burst connections, if more than 5 are received 
            # then process at the zone rate delay.
            limit_req zone=agrest burst=5;

            postgres_pass     database;
            postgres_escape $escaped $num;
            postgres_output text;

            postgres_query    GET  "SELECT biom FROM biom WHERE sample=$escaped";
            postgres_rewrite  GET  no_rows 410;
        }

        # get OTU data in BIOM v1.0
        location ~ /otu/(?<num>\d+?\.[0-9a-zA-Z]+)/json {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            # rate limit to 5 burst connections, if more than 5 are received 
            # then process at the zone rate delay.
            limit_req zone=agrest burst=5;

            postgres_pass     database;
            postgres_escape $escaped $num;
            postgres_output text;

            postgres_query    GET  "SELECT biom FROM biom WHERE sample=$escaped";
            postgres_rewrite  GET  no_rows 410;
        }

        # get OTU data in tab delimited format
        location ~ /otu/(?<num>\d+?\.[0-9a-zA-Z]+)/txt {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            # rate limit to 5 burst connections, if more than 5 are received 
            # then process at the zone rate delay.
            limit_req zone=agrest burst=5;

            postgres_pass     database;
            postgres_escape $escaped $num;
            postgres_output text;

            postgres_query    GET  "SELECT biomtxt FROM biom WHERE sample=$escaped";
            postgres_rewrite  GET  no_rows 410;
        }

        # get known samples
        location /sample {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            # rate limit to 5 burst connections, if more than 5 are received 
            # then process at the zone rate delay.
            limit_req zone=agrest burst=5;

            postgres_pass     database;
            postgres_output text;

            postgres_query GET "SELECT json_agg(sample) as samples FROM biom";
            postgres_rewrite  GET  no_rows 410;
        }

        ### redirect to ag github repo
        # determine samples by metadata by metadata
        ###  /metadata?age_gt=5&age_lt=15&antibiotic_select=Within%20the%20last%20week
        ### returns 
        
        # metadata descriptions
        ### category types, values, etc
        ### returns {"age": ["continuous", 0, 100], "antibiotic_select": ["discrete", ["Last week, etc etc"]]}
        
        # fetch sequences
        location ~ /sequence/(?<num>\d+?\.[0-9a-zA-Z]+) {
            # enable client side caching do minimize unnecessary rerequests
            expires 14d;
 
            # rate limit to 5 burst connections, if more than 5 are received 
            # then process at the zone rate delay.
            limit_req zone=agrest burst=5;
            
            rds_json on;
            postgres_output rds;
            postgres_pass    database;
            postgres_escape $escaped $num;
            postgres_query  GET "SELECT url as fastq_url FROM fastq WHERE sample=$escaped";
            postgres_rewrite  no_rows    410;
        }

        # adiv
        ### /alpha-diversity/{sample_id}{?metric}
        ### [sample_id, metric, value]
        
        # bdiv
        ### /beta-diversity/{sample_id}/{sample_id}{?metric}
        ### [sample_id, sample_id, metric, value]

        # errors should be of:
        ### {
        ###  "message": "Not Found",
        ###  "documentation_url": "https://developer.github.com/v3"
        ### }
    }
}
